{"version":3,"sources":["scripts.js"],"names":["document","addEventListener","expandMenu","target","querySelector","classList","toggle","event","matches","remove","setTopic","selection","count","innerText","innerHTML","random","randomOn","console","log","randomToggle","setTopicHeader","topicData","topicPosition","setImg","getElementById","src","progressCounter","setCategoryHeader","chosenCategory","setDescription","spot","populateTopic","topicList","i","length","menuItems","querySelectorAll","setAttribute","onclick","this","getAttribute","questionTotal","populateCategory","categoryList","counter","u","location","indexOf","push","categoryPosition","setCategory","categoryCounter","add","randomOff","randomTopicHolder","topicDataRandom","sort","a","b","Math","topicDataBackup","startQuiz","timeStart","Date","getTime","xmlhttp","XMLHttpRequest","onreadystatechange","readyState","status","quizBody","responseText","topicDataFilteredCategory","focus","modalGenerator","textStrings","endQuiz","nextQuestion","checkAnswer","keyCode","preventDefault","final","setProgressFieldValue","open","send","currentQuestion","userAnswer","value","rightAnswer","toLowerCase","trim","score","wrongAnswers","question","answer","errorGenerator","pleaseAnswer","updateProgressCounter","gameOverScreen","scoreMessage","results","timeEnd","gatherStats","contains","Number","numberOfQuestions","returnToMain","reload","message","newDiv","createElement","appendChild","setTimeout","removeChild","actionOne","actionTwo","closeModal","divClass","saveLocalStorage","itemName","window","localStorage","setItem","JSON","stringify","readLocalStorage","parse","getItem","gameSession","date","formatDate","outOf","duration","millisToMinutesAndSeconds","abs","topic","topicImg","category","months","d","dateNow","getDate","monthNow","getMonth","yearNow","getFullYear","getHours","getMinutes","getSeconds","millis","minutes","floor","seconds","toFixed","calculateScore","scoreHolder","calculateDuration","selectTopic","doAjax","id"],"mappings":"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","file":"scripts.min.js","sourcesContent":["'use strict'; // no sloppy JS habits allowed here.\r\n// wait till page is fully loaded\r\ndocument.addEventListener('DOMContentLoaded', function(){\r\n\tvar topicData; // empty var to hold question JSON\r\n\tvar topicDataRandom; // will hold the shuffled order\r\n\tvar topicDataBackup, backup2; // untampered copy of topicData order\r\n\tvar topicDataFilteredCategory = []; // holds questions from current category\r\n\tvar topicPosition; // track the selected topic\r\n\tvar categoryPosition; // track current category position... I might need this to be an object later.\r\n\tvar chosenCategory = 'All'; // hold user's selected category\r\n\tvar progressCounter = 0; // track number of questions asked\r\n\tvar score = 0; // track user's score\r\n\tvar final = null; // end status\r\n\tvar random = false; // boolean for shuffling questions\r\n\tvar swap = 'this is swap';\r\n\t// collection of text strings\r\n\tvar textStrings = {\r\n\t\t'selectTopic' : 'Please select a topic.',\r\n\t\t'pleaseAnswer' : 'At least try and answer the question, alright?',\r\n\t\t'endQuiz' : 'Are you sure you want to end your quiz?'\r\n\t}\r\n\tvar gameSession; // initialize local array for holding goals\r\n\t// if localStorage is found, load it into the variable\r\n\tif (readLocalStorage('gameSession')) {\r\n\t    //console.log('Found existing localStorage values.',readLocalStorage('gameSession'));\r\n\t    gameSession = readLocalStorage('gameSession');\r\n\t  }\r\n\t// otherwise make a blank array\r\n\telse {\r\n\t    console.log('No localStorage, starting fresh.');\r\n\t    gameSession = [];\r\n\t}\r\n\tvar timeStart; // will hold session starting timestamp\r\n\tvar timeEnd; // will hold session ending timestamp\r\n\tvar numberOfQuestions; // count of questions for stat page\r\n\tvar wrongAnswers = []; // hold all wrong answers\r\n\r\n\tfillStats(); // start by showing any existing stats\r\n\r\n\t// load questions and topics as soon as the page is ready\r\n\tfunction doAjax() {\r\n\t\tvar xmlhttp = new XMLHttpRequest(); // new request\r\n\t\tvar url = 'assets/data/topics.json'; // data source\r\n\r\n\t\txmlhttp.onreadystatechange = function() {\r\n\t\t\tif (this.readyState == 4 && this.status == 200) {\r\n\t    \t\ttopicData = JSON.parse(this.responseText); // holds entire JSON\r\n\t    \t\ttopicDataBackup = topicData; // create backup\r\n\t    \t\tconsole.log('Topic data backup CLEAN', topicDataBackup);\r\n\t    \t\ttopicDataRandom = topicData; // set random order to normal values... for now\r\n\t    \t\tconsole.log('Topicdata contents', topicData);\r\n\t    \t\t// console.log(topicData, 'untouched topicData');\r\n\t    \t\tpopulateTopic(); // fill Topic dropdown menu for user to choose\r\n\t    \t}\r\n    \t}\r\n\t    xmlhttp.open('GET', url, true); // connect\r\n\t    xmlhttp.send(); // Engage!\r\n\t}\r\n\tdoAjax(); // You know, run function.\r\n\r\n\t// built my own select menu\r\n\tfunction watchSelectMenu(){\r\n\t\t// open select menu when clicked\r\n\t\tdocument.querySelector(\".dropdownMenu\").addEventListener(\"click\", function(event){\r\n\t\t\tevent.preventDefault(); // stop button standard action\r\n\t\t\tconsole.log(\"You clicked topic menu\",this.id);\r\n\t\t\texpandMenu(this.id); //pass id to menu function\r\n\t\t});\r\n\t\t// open category menu when clicked\r\n\t\tdocument.querySelector(\".secondMenu\").addEventListener(\"click\", function(event){\r\n\t\t\t\tif (!document.querySelector(\"#categoryMenu\").classList.contains('disabled')) {\r\n\t\t\t\t\tevent.preventDefault(); // stop button standard action\r\n\t\t\t\t\tconsole.log(\"You clicked categoryMenu\",this.id);\r\n\t\t\t\t\texpandMenu(this.id); //pass id to menu function\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n\twatchSelectMenu();\r\n\r\n\t// when button is clicked, toggle visibility of menu items. It's not fully reusable (yet)\r\n\tfunction expandMenu(target) {\r\n\r\n\t\t// change CSS visibility for specified menu ID\r\n\t\tdocument.querySelector(\"#\"+target+\"+.dropdownList\").classList.toggle(\"show\");\r\n\r\n\t\t// hide menu if anything other than button is clicked\r\n\t\tdocument.querySelector('body').addEventListener('click', function(event){\r\n\t\t\t// if topic menu exists on page...\r\n\t\t\tif (document.querySelector(\"#\"+target+\"+ .dropdownList\")) {\r\n\t\t\t\t// if target isn't a button turn off show CSS class\r\n\t\t\t\tif (!event.target.matches('button')) {\r\n\t\t\t\t\tdocument.querySelector(\"#\"+target+\"+ .dropdownList\").classList.remove(\"show\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t} // end expandMenu\r\n\r\n\t// set homepage topic menu header from JSON when menu item is selected\r\n\tfunction setTopic(selection, count) {\r\n\t\tdocument.querySelector(\"#topicMenu\").innerText = selection;\r\n\t\tdocument.querySelector(\"#topicMenu + .dropdownList\").classList.toggle(\"show\");\r\n\t\t//console.log(\"you clicked \"+selection.innerHTML);\r\n\t\tdocument.querySelector('.questionCount').innerHTML = count + ' Questions'; // total number of questions\r\n\t\tif(random){\r\n\t\t\t// document.querySelector('.randomHolder').classList.add('active');\r\n\t\t\t// document.querySelector('.randomStatus').innerText = 'Random On'; // start with random off\r\n\t\t\t// randomToggle();\r\n\t\t\trandomOn();\r\n\t\t\tconsole.log('random is activated from setTopic');\r\n\t\t} else {\r\n\t\t\t// document.querySelector('.randomStatus').innerText = 'Random Off'; // start with random off\r\n\t\t\t// document.querySelector('.randomHolder').classList.remove('active');\r\n\t\t\t randomToggle();\r\n\t\t\t//randomOff();\r\n\t\t}\r\n\t\tdocument.querySelector('.randomHolder').classList.remove('hide'); // make random toggle visible\r\n\t}\r\n\r\n\t// set topic name on active quiz page\r\n\tfunction setTopicHeader() {\r\n\t\tdocument.querySelector('.topic').innerText = topicData[topicPosition]['name'];\r\n\t\t\r\n\t}\r\n\tfunction setImg(){\r\n\t\tdocument.getElementById(\"img\").src = topicData[topicPosition]['questions'][progressCounter]['img'];\r\n\t\tconsole.log(topicData[topicPosition]['questions'][progressCounter]['img']);\r\n\t}\r\n\r\n\t// set topic name on active quiz page\r\n\tfunction setCategoryHeader() {\r\n\t\tdocument.querySelector('.category').innerText = 'Category: ' + chosenCategory;\r\n\t}\r\n\r\n\t// set description contents from JSON when menu item is selected\r\n\tfunction setDescription(spot) {\r\n\t\tdocument.querySelector(\"#topicRow .lowerBox\").innerHTML = topicData[spot]['description'];\r\n\t}\r\n\r\n\t// load topic items from JSON file\r\n\tfunction populateTopic() {\r\n\t\tvar topicList = ''; // hold HTML tag elements\r\n\t\tvar linkOpen = '<a>'; // opening tag to be appended below\r\n\t\tvar linkClose = '</a>' // closing tag to be appended below\r\n\t\t// attach opening and closing tag to each topic captured from JSON\r\n\t\tfor (var i = 0; i < topicData.length; i++) {\r\n\t\t\ttopicList += linkOpen + topicData[i][\"name\"] + linkClose; // grab name field\r\n\t\t}\r\n\t\tdocument.querySelector(\"#topicList\").innerHTML = topicList; // set div content\r\n\t\tvar menuItems = document.querySelectorAll(\"#topicList.dropdownList a\"); // selector for all list link elements\r\n\r\n\t\t// set click event listener for each element. I think this was clever\r\n\t\tfor (var i = 0; i < menuItems.length; i++) {\r\n\t\t\t// Creates an attribute to track order. Sets it to current loop iteration value\r\n\t\t\tmenuItems[i].setAttribute('order', i);\r\n\t\t\t// onclick function for every menuItem link\r\n\t\t\tmenuItems[i].onclick = function(){\r\n\t\t\t\t// sends order position to description function. Function pulls the corresponding description from the JSON\r\n\t\t\t\ttopicPosition = this.getAttribute('order');\r\n\t\t\t\tsetDescription(topicPosition); // set description to selected topic\r\n\t\t\t\tvar questionTotal = topicData[topicPosition]['questions'].length; // count questions\r\n\t\t\t\tsetTopic(this.innerHTML,questionTotal); // sends topic name to the button value. questionTotal to description\r\n\t\t\t\tif (document.querySelector('.secondMenu.disabled')) {\r\n\t\t\t\t\tdocument.querySelector('.secondMenu.disabled').classList.remove('disabled'); // enable the category selection menu\r\n\t\t\t\t}\r\n\t\t\t\tpopulateCategory(); // when topic is chosen set the category\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// load category items from JSON file\r\n\tfunction populateCategory() {\r\n\t\tvar categoryList = '<a order=\\'0\\'>All</a>'; // hold HTML tag elements\r\n\t\tvar linkOpen = '<a>'; // opening tag to be appended below\r\n\t\tvar linkClose = '</a>' // closing tag to be appended below\r\n\t\tvar counter = 1; // counts number of questions in each category (might need an array...)\r\n\r\n\t\t// attach opening and closing tag to each topic captured from JSON\r\n\t\tvar u = []; // will hold unique categories\r\n\t\tvar location = topicData[topicPosition]['questions'];\r\n\t\tfor(var i = 0; i < location.length; i++) {\r\n\t\t\t// fancy index searching to filter unique values. If unique then add to array\r\n\t\t\tif (u.indexOf(location[i]['category']) == -1 && location[i]['category'] !== '') {\r\n\t\t\t\tu.push(location[i]['category']);\r\n\t\t\t\tconsole.log(topicData[topicPosition]['questions'][i]['category']);\r\n\t\t\t\tcategoryList += linkOpen + topicData[topicPosition]['questions'][i]['category'] + linkClose; // grab name field\r\n\t\t\t\tcounter++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdocument.querySelector(\"#categoryList\").innerHTML = categoryList; // set div content\r\n\t\tvar menuItems = document.querySelectorAll(\"#categoryList.dropdownList a\"); // selector for all list link elements\r\n\r\n\t\t// set click event listener for each element. I still think this is clever\r\n\t\tfor (var i = 0; i < menuItems.length; i++) {\r\n\t\t\t// Creates an attribute to track order. Sets it to current loop iteration value\r\n\t\t\tmenuItems[i].setAttribute('order', i);\r\n\t\t\t// onclick function for every menuItem link\r\n\t\t\tmenuItems[i].onclick = function(){\r\n\t\t\t\t// sends order position to description function. Function pulls the corresponding description from the JSON\r\n\t\t\t\tcategoryPosition = this.getAttribute('order');\r\n\t\t\t\t//setCatDescription(categoryPosition); // there is no category Position right now.\r\n\t\t\t\t// var questionTotal = topicData[topicPosition]['category'].length; // count questions\r\n\t\t\t\tvar questionTotal = counter; // count questions\r\n\t\t\t\tsetCategory(this.innerHTML,questionTotal); // sends category name to the button value. questionTotal to description\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// set homepage Category menu header when item is selected\r\n\tfunction setCategory(selection, count) {\r\n\t\tchosenCategory = selection; // set global category to user's selection\r\n\t\tdocument.querySelector(\"#categoryMenu\").innerText = selection;\r\n\t\tdocument.querySelector(\"#categoryMenu + .dropdownList\").classList.toggle(\"show\");\r\n\t\tconsole.log(\"you clicked \" + selection);\r\n\t\t// document.querySelector('.questionCount').innerHTML = topicDataFilteredCategory[progressCounter].length + ' Questions'; // total number of questions\r\n\t\t// attach opening and closing tag to each topic captured from JSON\r\n\t\tvar u = []; // will hold unique categories\r\n\t\tvar location = topicData[topicPosition]['questions'];\r\n\t\tvar categoryCounter = 0;\r\n\t\tfor(var i = 0; i < location.length; i++) {\r\n\t\t\tif (location[i]['category'] == chosenCategory) {\r\n\t\t\t\tcategoryCounter++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (chosenCategory == 'All') {\r\n\t\t\tdocument.querySelector('.questionCount').innerHTML = location.length + ' Questions';\r\n\t\t} else {\r\n\t\t\tdocument.querySelector('.questionCount').innerHTML = categoryCounter + ' Questions'; // total number of questions\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// event listener for start button. I can move this somewhere else...\r\n\tfunction watchQuiz(){\r\n\t\t// start quiz when button is pressed\r\n\t\tdocument.querySelector('.start').addEventListener('click', function() {\r\n\t\t\t// console.log(document.querySelector('#topicMenu').innerText);\r\n\t\t\t\r\n\t\t\tvar topicVar = document.querySelector('#topicMenu').innerText; // DOM selection for chosen topic\r\n\t\t\t// Input validation for topic\r\n\t\t\tif (topicVar == 'Choose One') {\r\n\t\t\t\terrorGenerator(textStrings.selectTopic); // modal with nagging text\r\n\t\t\t} else {\r\n\t\t\t\tstartQuiz(); // Engage!\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\twatchQuiz(); // start event listener. Called via function later when container content is replaced.\r\n\t// I know there's probably a smarter way to do this...\r\n\r\n\r\n\t// reusabe random function\r\n\t/*function randomize(a, b) {\r\n\t\tconsole.log('i\\'m inside the randomize');\r\n\t    return Math.random();\r\n\t}*/\r\n\r\n\t//event listener to activate random order\r\n\tdocument.querySelector('.randomHolder').addEventListener('click', function(){\r\n\t\tif (random) {\r\n\t\t\trandom = false;\r\n\t\t\trandomOff();\r\n\t\t} else {\r\n\t\t\trandom = true;\r\n\t\t\trandomOn();\r\n\t\t}\r\n\t});\r\n\r\n\t// manipulate UI fields to communicate random status\r\n\tfunction randomOn(){\r\n\t\tdocument.querySelector('.randomStatus').innerText = 'Random on';\r\n\t\tdocument.querySelector('.randomHolder').classList.add('active');\r\n\t\trandomToggle();\r\n\t}\r\n\r\n\tfunction randomOff(){\r\n\t\tdocument.querySelector('.randomStatus').innerText = 'Random off';\r\n\t\tdocument.querySelector('.randomHolder').classList.remove('active');\r\n\t\trandomToggle();\r\n\t}\r\n\r\n\t// turn random on or off\r\n\tfunction randomToggle(){\r\n\t\tconsole.log('in randomToggle function');\r\n\t\tif (random) {\r\n\t\t\tconsole.log('random var has value');\r\n\t\t\t//var randomTopicHolder = topicDataRandom[topicPosition]['questions'];\r\n\t\t\tvar randomTopicHolder = topicDataRandom[topicPosition]['questions'];\r\n\t\t\tconsole.log(randomTopicHolder,'normal order');\r\n\t\t\trandomTopicHolder.sort(function (a, b) {return Math.random() - 0.5;});\r\n    \t\tconsole.log(randomTopicHolder,'random order');\r\n\t\t\ttopicData = topicDataRandom;\r\n\t\t\tconsole.log(topicData[topicPosition]['questions'],'topicData now random');\r\n\t\t} else {\r\n\t\t\tconsole.log('topicdata backup', topicDataBackup);\r\n\t\t\tconsole.log('topicdata random', topicDataRandom);\r\n\t\t\ttopicData = topicDataBackup; // reset topicData to the backup copy.\r\n\t\t\tconsole.log(topicData[topicPosition]['questions'],'topicData random is off');\r\n\t\t}\r\n\t}\r\n\r\n\t// grab quiz page body and fire off question and score system. This is the big one.\r\n\tfunction startQuiz(){\r\n\t\ttimeStart = new Date().getTime();\r\n\t\t// load quiz screen via AJAX\r\n\t\tvar xmlhttp = new XMLHttpRequest(); // new request\r\n\t\tvar url = 'assets/data/questionScreen.html'; // data source. It's just an HTML page\r\n\r\n\t\t// load quiz body and call even listeners\r\n\t\txmlhttp.onreadystatechange = function() {\r\n\t\t\tif (this.readyState == 4 && this.status == 200) {\r\n\t    \t\tvar quizBody = this.responseText; // holds entire JSON\r\n\t    \t\t// render HTML into container. A poor man's single page application.\r\n\t    \t\tdocument.querySelector('body').innerHTML = quizBody;\r\n\t    \t\t// How do I do this more intelligently?\r\n\r\n\t    \t\tsetTopicHeader(); // set topic name\r\n\t\t\t\tsetCategoryHeader(); // set category name\r\n\t\t\t\tsetImg();\r\n//hi\r\n\t\t\t\t// if no category is chosen, proceed in with simple question asking\r\n\t\t\t\tif (chosenCategory == 'All') {\r\n\t\t\t\t\t// prefill question one from current topic data\r\n\t\t\t\t\tdocument.querySelector('.questionHolder').innerHTML = topicData[topicPosition]['questions'][0]['question'];\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// console.log(topicData[topicPosition]['questions'].length,'length of questions');\r\n\t\t\t\t\tconsole.log('chosenCategory',chosenCategory);\r\n\t\t\t\t\tconsole.log(topicData[topicPosition]['questions']);\r\n\t\t\t\t\t// find all questions that match chosen category\r\n\t\t\t\t\tfor (var i = 0; i < topicData[topicPosition]['questions'].length; i++) {\r\n\t\t\t\t\t\t// if question matches category, add to filtered array\r\n\t\t\t\t\t\tconsole.log(topicData[topicPosition]['questions'][i]['category']);\r\n\t\t\t\t\t\tif (topicData[topicPosition]['questions'][i]['category'] == chosenCategory){\r\n\t\t\t\t\t\t\ttopicDataFilteredCategory.push(topicData[topicPosition]['questions'][i]);\r\n\t\t\t\t\t\t\t// console.log('category match. i gonna push');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconsole.log(topicDataFilteredCategory,'show me what you got, topicDataFilteredCategory.');\r\n\t\t\t\t\tdocument.querySelector('.questionHolder').innerHTML = topicDataFilteredCategory[0]['question'];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdocument.querySelector('#yourAnswer').focus(); // give text input focus when quiz starts\r\n\r\n\t\t\t\t// close button event listener\r\n\t\t\t\tdocument.querySelector('.close').addEventListener('click', function(){\r\n\t\t\t\t\tmodalGenerator(textStrings.endQuiz, 'yes', 'no'); // pass text to modal method\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// event listener for hint button\r\n\t\t\t\tdocument.querySelector('.hint').addEventListener('click', function(){\r\n\t\t\t\t\tconsole.log('progress counter inside hint is', progressCounter);\r\n\t\t\t\t\tmodalGenerator(topicData[topicPosition]['questions'][progressCounter]['hint'], 'yes');\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// event listener for skip button\r\n\t\t\t\tdocument.querySelector('.skip').addEventListener('click', function(){\r\n\t\t\t\t\tnextQuestion(); // load next question without changing score\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// if random boolean is enabled\r\n\t\t\t\tif (random) {\r\n\t\t\t\t\tdocument.querySelector('.random span').innerHTML = 'Random On';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdocument.querySelector('.random span').innerHTML = 'Random Off';\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// event listener for answer button\r\n\t\t\t\tdocument.querySelector('.answer').addEventListener('click', function(){\r\n\t\t\t\t\tcheckAnswer();\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// event listener for enter key\r\n\t\t\t\tdocument.querySelector('#yourAnswer').addEventListener('keypress', function(event){\r\n\t\t\t\t\tif (event.keyCode == 13) {\r\n\t\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t\tconsole.log('you pressed enter in text field');\r\n\t\t\t\t\t\tif(!final){\r\n\t\t\t\t\t\t\tcheckAnswer();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tsetProgressFieldValue(); // update progress value at top of screen\r\n\t    }\r\n\t    xmlhttp.open('GET', url, true); // connect\r\n\t    xmlhttp.send(); // Engage!\r\n\r\n\t} // end quiz. That was a big AJAX request...\r\n\r\n\t// validate user answer\r\n\tfunction checkAnswer(){\r\n\t\t// console.log('the value of swap, swap')\r\n\t\t// if(swap == true){\r\n\t\t// \tdocument.querySelector('.questionHolder').innerHTML = topicDataFilteredCategory[progressCounter]['question'];\r\n\t\t// \tconsole.log('swap is first called so its true ')\r\n\t\t// \tswap = false;\r\n\t\t// }\r\n\t\t// else{\r\n\t\t// \tdocument.querySelector('.questionHolder').innerHTML = topicDataFilteredCategory[progressCounter]['answer'];\r\n\t\t// \tconsole.log('swap is false')\r\n\t\t// \tswap = true;\r\n\t\t// }\r\n\t\tvar userAnswer = document.querySelector('#answerRow textarea').value;\r\n\t\tvar currentQuestion;\r\n\t\t// if no category is specified\r\n\t\tif (chosenCategory == 'All') {\r\n\t\t\tvar rightAnswer = topicData[topicPosition]['questions'][(progressCounter)]['answer'];\r\n\t\t\tcurrentQuestion = topicData[topicPosition]['questions'][(progressCounter)]['question'];\r\n\t\t} // end all category\r\n\r\n\t\t// if there is a specified category\r\n\t\telse {\r\n\t\t\tvar rightAnswer = topicDataFilteredCategory[(progressCounter)]['answer'];\r\n\t\t\tcurrentQuestion = topicDataFilteredCategory[(progressCounter)]['question'];\r\n\t\t} // end else\r\n\r\n\t\t// basic validation. Show modal if there's a value in textarea\r\n\t\tif (userAnswer != '') {\r\n\t\t\t// see if user input matches real answer\r\n\t\t\tfunction checkAnswer(){\r\n\t\t\t\t// converts to lowercase and removes whitespace to be mobile friendly\r\n\t\t\t\tif (userAnswer.toLowerCase().trim() == rightAnswer.toLowerCase()) {\r\n\t\t\t\t\t// display right answer in modal\r\n\t\t\t\t\tmodalGenerator('Correct, the answer is <span class=\\'correct\\'>' + rightAnswer + '</span>', 'Continue');\r\n\t\t\t\t\tdocument.getElementById(\"img\").src = \"\"\r\n\t\t\t\t\tprogressCounter++;\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\r\n\t\t\t\t\t//setImg();\r\n\t\t\t\t\tscore++; // increase score if correct\r\n\t\t\t\t} else {\r\n\t\t\t\t\twrongAnswers.push({\r\n\t\t\t\t\t\t'question' : currentQuestion,\r\n\t\t\t\t\t\t'answer' : rightAnswer,\r\n\t\t\t\t\t\t'userAnswer' : userAnswer\r\n\t\t\t\t\t});\r\n\t\t\t\t\tmodalGenerator('Sorry, the answer is <span class=\\'wrong\\'>' + rightAnswer + '</span>', 'Continue');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcheckAnswer(); // call above function. Useful if I move the code block somewhere else\r\n\t\t}\r\n\t\telse {\r\n\t\t\terrorGenerator(textStrings.pleaseAnswer); // if field is blank yell at the user\r\n\t\t}\r\n\t} // end check answer\r\n\r\n\t// load new question from topicData JSON dump\r\n\tfunction nextQuestion() {\r\n\r\n\t\t// update counter if there are questions left in the topic\r\n\t\tif(progressCounter < topicData[topicPosition]['questions'].length) {\r\n\t\t\tupdateProgressCounter();\r\n\t\t} else if (progressCounter == topicData[topicPosition]['questions'].length) {\r\n\t\t\t// Placeholder for now. In the future I may want to take additional actions here if the game is over.\r\n\t\t\tupdateProgressCounter(); // This currently handles the end game scenario. Action here is kinda redundant (for now).\r\n\t\t}\r\n\t}\r\n\t\r\n\t// update progress and score\r\n\tfunction updateProgressCounter() {\r\n\t\t// if no category is specified\r\n\t\tif (chosenCategory == 'All') {\r\n\t\t\t// increase score if there are questions to ask\r\n\t\t\tif(progressCounter < topicData[topicPosition]['questions'].length) {\r\n\t\t\t\tprogressCounter++; // +1\r\n\t\t\t\t// if we're not on the last question\r\n\t\t\t\tif (progressCounter <= topicData[topicPosition]['questions'].length - 1){\r\n\t\t\t\t\t// console.log('new value for progressCounter: ' + progressCounter);\r\n\t\t\t\t\t// set HTML content to new question value\r\n\t\t\t\t\tdocument.querySelector('.questionHolder').innerHTML = topicData[topicPosition]['questions'][progressCounter]['question'];\r\n\t\t\t\t\t//right here!!\r\n\t\t\t\t\tsetImg();\r\n\t\t\t\t\t//console.log('this should be a new question',topicData[topicPosition]['questions'][progressCounter]['question']);\r\n\t\t\t\t\tsetProgressFieldValue(); // update progress display at top of page\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// if final question has already been asked\r\n\t\t\tif (progressCounter == topicData[topicPosition]['questions'].length) {\r\n\t\t\t\tgameOverScreen();\r\n\t\t\t}\r\n\t\t} // end all category\r\n\t\t// if specific category is chosen\r\n\t\telse {\r\n\t\t\tif(progressCounter < topicDataFilteredCategory.length) {\r\n\t\t\t\tprogressCounter++; // +1\r\n\t\t\t\t// if we're not on the last question\r\n\t\t\t\tif (progressCounter <= topicDataFilteredCategory.length - 1){\r\n\t\t\t\t\t// console.log('new value for progressCounter: ' + progressCounter);\r\n\t\t\t\t\t// set HTML content to new question value\r\n\t\t\t\t\tdocument.querySelector('.questionHolder').innerHTML = topicDataFilteredCategory[progressCounter]['question'];\r\n\t\t\t\t\t//console.log('this should be a new question',topicData[topicPosition]['questions'][progressCounter]['question']);\r\n\t\t\t\t\tsetProgressFieldValue(); // update progress display at top of page\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// if final question has already been asked\r\n\t\t\tif (progressCounter == topicDataFilteredCategory.length) {\r\n\t\t\t\tgameOverScreen();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction gameOverScreen(){\r\n\t\tconsole.log('Progress report: game over');\r\n\t\t// content of score page\r\n\t\tvar scoreMessage = '<h2>Game Over</h2>' + 'Topic: ' + topicData[topicPosition]['name']\r\n\t\t\t+ '<br>Category: ' + chosenCategory\r\n\t\t\t+ '<br><strong>Score</strong>: ' + score + ' out of ' + topicData[topicPosition]['questions'].length;\r\n\t\tconsole.log(wrongAnswers);\r\n\t\tvar results = '<div id=\\'answerToggle\\'>Show Wrong Answers</div><ul id=\\'resultsList\\'>';\r\n\t\tfor (var i = 0; i < wrongAnswers.length; i++) {\r\n\t\t\tresults += '<li><span>Question: </span>' + (wrongAnswers[i]['question']) + '</li>';\r\n\t\t\tresults += '<li><span>Your Answer: </span>' + (wrongAnswers[i]['userAnswer']) + '</li>';\r\n\t\t\tresults += '<li class=\\'groupEnd\\'><span>Correct Answer: </span>' + (wrongAnswers[i]['answer']) + '</li>';\r\n\t\t}\r\n\t\tresults += '</ul>';\r\n\r\n\t\t// lets other loops know the end game sequence is active.\r\n\t\t// Note: If I do a smarter content div replacement I'll need to clear this var when user presses Okay\r\n\t\tfinal = true;\r\n\t\ttimeEnd = new Date().getTime();\r\n\t\tgatherStats(); // send session stats to localStorage\r\n\t\tmodalGenerator(scoreMessage+results, 'Continue'); // should I make a 3rd var for desitnation?\r\n\t\tdocument.querySelector('.messageBox .yes').focus(); // give main action button focus\r\n\r\n\t\tdocument.querySelector('#answerToggle').addEventListener('click', function(){\r\n\t\t\tdocument.querySelector('#resultsList').classList.toggle('show');\r\n\t\t\tif ( document.querySelector('#resultsList').classList.contains('show')){\r\n\t\t\t\tdocument.querySelector('#answerToggle').innerHTML = 'Hide Wrong Answers';\r\n\t\t\t} else {\r\n\t\t\t\tdocument.querySelector('#answerToggle').innerHTML = 'Show Wrong Answers';\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t}\r\n\r\n\t// update progress field contents\r\n\tfunction setProgressFieldValue() {\r\n\t\tif (chosenCategory == 'All') {\r\n\t\t\t// update counter at top of page\r\n\t\t\tif (document.querySelector('.progress')) {\r\n\t\t\t\tdocument.querySelector('.progress').innerHTML = 'Progress: '\r\n\t\t\t\t\t+ (Number(progressCounter) + 1) + ' / ' + topicData[topicPosition]['questions'].length;\r\n\t\t\t\t\tnumberOfQuestions = topicData[topicPosition]['questions'].length;\r\n\t\t\t}\r\n\t\t\t// clear the answer textarea if it exists on the page\r\n\t\t\tif(document.querySelector('#answerRow textarea')){\r\n\t\t\t\tdocument.querySelector('#answerRow textarea').value = '';\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if specific category is chosen\r\n\t\telse {\r\n\t\t\t// update counter at top of page\r\n\t\t\tif (document.querySelector('.progress')) {\r\n\t\t\t\tdocument.querySelector('.progress').innerHTML = 'Progress: '\r\n\t\t\t\t\t+ (Number(progressCounter) + 1) + ' / ' + topicDataFilteredCategory.length;\r\n\t\t\t\t\tnumberOfQuestions = topicDataFilteredCategory.length;\r\n\t\t\t}\r\n\t\t\t// clear the answer textarea if it exists on the page\r\n\t\t\tif(document.querySelector('#answerRow textarea')){\r\n\t\t\t\tdocument.querySelector('#answerRow textarea').value = '';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// clear quiz content from container div and load start screen\r\n\tfunction returnToMain() {\r\n\t\tlocation.reload();\r\n\t\t// I need to do this properly or not at all...\r\n\t\t//progressCounter = 0;\r\n\t\t//doAjax();\r\n\t}\r\n\r\n\tif (document.querySelector('.info')) {\r\n\t\tdocument.querySelector('.info').addEventListener('click', function(){\r\n\t\t\t//openModal() {}\r\n\t\t\t//or...\r\n\t\t\t//strings = ['first','second','third'];\r\n\t\t\tvar strings = '<h3>What is this?</h3><div class=\\'left-align small\\'\\'><p>Typical Quiz is a study tool to help my stubborn brain remember stuff. Built from scratch in vanilla Javascript, it was also good code practice.</p><p>Source Code: <a href=\\'https://github.com/gricha2380/typicalquiz\\' class=\\'match\\'>https://github.com/gricha2380/typicalquiz</a></p></div>';\r\n\t\t\tmodalGenerator(strings,'Okay');\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t// nifty function to deliver standardized error messages\r\n\tfunction errorGenerator(message) {\r\n\t\tvar divClass = 'errorBox'; // matches CSS properties\r\n\t\tvar newDiv = document.createElement('div'); // create div element\r\n\t\tnewDiv.classList.add(divClass); // apply class for manipulation & styling\r\n\t\tnewDiv.innerText = message; // apply message var as content of new div\r\n\t\t//console.log(newDiv);\r\n\t\tdocument.querySelector('.container').appendChild(newDiv); // render div at bottom of container\r\n\t\t// delete error after 5 seconds\r\n\t\tsetTimeout(function() {\r\n\t    \tdocument.querySelector('.container').removeChild(document.querySelector('.' + divClass));\r\n\t    }, 5000);\r\n\t}\r\n\r\n\tfunction modalGenerator(message, actionOne, actionTwo) {\r\n\t\tvar divClass = 'messageBox'; // hold CSS class name\r\n\t\tvar newDiv = document.createElement('div'); // create div element\r\n\t\tnewDiv.classList.add(divClass); // apply class for manipulation & styling\r\n\t\t//newDiv.innerText = message; // apply message var as content of new div. Ha, simpler times.\r\n\t\t// Assume two buttons means one will end game\r\n\t\tif (actionTwo) {\r\n\t\t\t// apply HTML for two button row. Use passed value for caption. Actions are predetermined.\r\n\t\t\tnewDiv.innerHTML = '<div class=\\'inner\\'><div class=\\'row pad\\'>'\r\n\t\t\t\t+ message + '</div> <div class=\\'row full multi\\'><button class=\\'yes\\'>' + actionOne\r\n\t\t\t\t+ '</button><button class=\\'no\\'>' + actionTwo +'</button></div></div>';\r\n\t\t\tdocument.querySelector('.container').appendChild(newDiv); // render div at bottom of container\r\n\t\t\tdocument.querySelector('.' + divClass +' .yes').focus(); // give main action button focus\r\n\t\t\t// If user clicks yes, return to main\r\n\t\t\tdocument.querySelector('.' + divClass +' .yes').addEventListener('click', function(){\r\n\t\t\tdocument.querySelector('.container').removeChild(document.querySelector('.' + divClass));\r\n\t\t\treturnToMain(); // O'Brien, one to beam up.\r\n\t\t\t});\r\n\t\t\t// If user presses no, just cancel\r\n\t\t\tdocument.querySelector('.' + divClass + ' .no').addEventListener('click', function(){\r\n\t\t\t\t// self destruct the modal if no\r\n\t\t\t\tdocument.querySelector('.container').removeChild(document.querySelector('.' + divClass));\r\n\t\t\t\tdocument.querySelector('#yourAnswer').focus(); // give text input focus\r\n\t\t\t});\r\n\t\t}\r\n\t\t// If only one button option is passed\r\n\t\telse {\r\n\t\t\t// apply HTML for single button row. Use passed value for caption. Actions are still predetermined.\r\n\t\t\tnewDiv.innerHTML = '<div class=\\'inner\\'><div class=\\'row pad\\'>'\r\n\t\t\t\t+ message + '</div> <div class=\\'row full\\'><button class=\\'yes\\'>'\r\n\t\t\t\t+ actionOne + '</button></div></div>';\r\n\t\t\tdocument.querySelector('.container').appendChild(newDiv); // render div at bottom of container\r\n\t\t\tdocument.querySelector('.' + divClass +' .yes').focus(); // give main action button focus\r\n\r\n\t\t\t// close modal on enter keypress\r\n\t\t\tdocument.querySelector('.' + divClass +' .yes').addEventListener('keypress', function(event){\r\n\t\t\t\tconsole.log('I know you pressed something')\r\n\t\t\t\t//console.log(event.keyCode)\r\n\t\t\t\tif (event.keyCode == 13) {\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\tconsole.log('you pressed enter in a modal');\r\n\t\t\t\t\tcloseModal();\r\n\t\t\t\t\t//69 = e;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// if user clicks the button, delete the modal\r\n\t\t\tdocument.querySelector('.' + divClass +' .yes').addEventListener('click', function(){\r\n\t\t\t\tcloseModal();\r\n\t\t\t\tconsole.log('I will try to close modal');\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tfunction closeModal(){\r\n\t\t\tdocument.querySelector('.container').removeChild(document.querySelector('.' + divClass)); // self destruct\r\n\t\t\t// If caption matches answer box button. There are smarter ways to do this...\r\n\t\t\tif (actionOne == 'Continue') {\r\n\t\t\t\t// if final var has value, do endgame scenario\r\n\t\t\t\tif (final) {\r\n\t\t\t\t\treturnToMain();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnextQuestion();\r\n\t\t\t\t\tdocument.querySelector('#yourAnswer').focus(); // give text input focus\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} // end modal generator\r\n\r\n\r\n\t// save to localStorage\r\n\tfunction saveLocalStorage(itemName) {\r\n\t\twindow.localStorage.setItem('gameSession', JSON.stringify(itemName));\r\n\t\tconsole.log('prove it exists by typing:','JSON.parse(window.localStorage.getItem(\\'' + 'gameSession' + '\\'));');\r\n\t}\r\n\r\n\t  // read from localStorage\r\n\t  function readLocalStorage(itemName) {\r\n\t    return JSON.parse(window.localStorage.getItem(itemName));\r\n\t  }\r\n\r\n\t// collects data to send to localStorage\r\n\tfunction gatherStats(){\r\n\t\tconsole.log('Info sent to localStorage');\r\n\t  \t// When game is over, push stats to array\r\n\t\tgameSession.push({\r\n\t\t\t'date' : formatDate(),\r\n\t\t\t'score' : score,\r\n\t\t\t'outOf' : numberOfQuestions,\r\n\t\t\t'duration' : [timeStart, timeEnd, millisToMinutesAndSeconds(Math.abs(timeStart - timeEnd))],\r\n\t\t\t'topic' : topicData[topicPosition]['name'],\r\n\t\t\t'topicImg' : topicData[topicPosition]['questions'][progressCounter]['img'],\r\n\t\t\t'category' : chosenCategory\r\n\t\t});\r\n\t\t// send array to localStorage function\r\n\t\tsaveLocalStorage(gameSession);\r\n\t}\r\n\r\n\t// date and time\r\n\tfunction formatDate() {\r\n\t    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\r\n\t    var d = new Date();\r\n\t    var dateNow = d.getDate();\r\n\t    var monthNow = d.getMonth();\r\n\t    var yearNow = d.getFullYear();\r\n\t    var timeNow = d.getHours()+':'+d.getMinutes()+':'+d.getSeconds();\r\n\t    return months[monthNow] +' '+ dateNow + ', ' + yearNow;\r\n  \t}\r\n\r\n  \t// miliseconds to seconds\r\n  \tfunction millisToMinutesAndSeconds(millis) {\r\n\t  var minutes = Math.floor(millis / 60000);\r\n\t  var seconds = ((millis % 60000) / 1000).toFixed(0);\r\n\t  return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\r\n\t}\r\n\r\n\t// fill out stats blocks\r\n\tfunction fillStats() {\r\n\t\tif (readLocalStorage('gameSession')) {\r\n\t\t\t//console.log('gameSession', gameSession);\r\n\t\t\tdocument.querySelector('.stats .quizSessions span').innerHTML = gameSession.length;\r\n\t\t\tdocument.querySelector('.stats .avgScore span').innerHTML = calculateScore();\r\n\t\t\tdocument.querySelector('.stats .avgDuration span').innerHTML = calculateDuration();\r\n\t\t\t//document.querySelector('.stats .fastestRound span').innerHTML = calcualteFastest();\r\n\t\t\t//document.querySelector('.stats .slowestRound span').innerHTML = gameSession.length;\r\n\t\t} else {\r\n\t\t\tdocument.querySelector('.stats ul').innerHTML = '<span class=\\'dim\\'>No games played yet!</span>';\r\n\t\t}\r\n\t}\r\n\t// perform math before sending to localStorage\r\n\tfunction calculateScore() {\r\n\t\tvar scoreHolder = 0;\r\n\t\tfor(var i = 0;i<gameSession.length;i++){\r\n\t\t\tscoreHolder += gameSession[i]['score'] / gameSession[i]['outOf'];\r\n\t\t\t//console.log(scoreHolder, \"scoreHolder current\");\r\n\t\t}\r\n\t\t// console.log(scoreHolder / gameSession.length,'scoreholder / gamelesson length');\r\n\t\tscoreHolder = (scoreHolder / gameSession.length * 100).toFixed(2) + '%';\r\n\t\t// console.log(scoreHolder);\r\n\t\treturn scoreHolder;\r\n\t}\r\n\r\n\t// subtract timestamps to determine how log the session was\r\n\tfunction calculateDuration() {\r\n\t\tvar scoreHolder = 0;\r\n\t\tfor(var i = 0;i<gameSession.length;i++){\r\n\t\t\tscoreHolder += gameSession[i]['duration'][1] - gameSession[i]['duration'][0];\r\n\t\t\t// console.log(scoreHolder, \"scoreHolder current\");\r\n\t\t}\r\n\t\tscoreHolder = scoreHolder / gameSession.length;\r\n\t\t//console.log(scoreHolder, 'avg duration here');\r\n\t\treturn millisToMinutesAndSeconds(scoreHolder);\r\n\t}\r\n\t// loop through session data to determine fastest session\r\n\tfunction calcualteFastest() {\r\n\t\tvar scoreHolder = 0;\r\n\t\tfor(var i = 0;i<gameSession.length;i++){\r\n\t\t\tscoreHolder += gameSession[i]['duration'][1] - gameSession[i]['duration'][0];\r\n\t\t\t// console.log(scoreHolder, \"scoreHolder current\");\r\n\t\t}\r\n\t\tscoreHolder = scoreHolder / gameSession.length;\r\n\t\t//console.log(scoreHolder, 'avg duration here');\r\n\t\treturn millisToMinutesAndSeconds(scoreHolder);\r\n\t}\r\n\r\n\t// Placeholder. Not being used.\r\n\tfunction calcualteSlowest() {\r\n\t\tvar scoreHolder = 0;\r\n\t\treturn millisToMinutesAndSeconds(scoreHolder);\r\n\t}\r\n\r\n// end fake document ready\r\n}, false);"]}